package {{package}}.mq.common.config;

import {{package}}.mq.common.MQListener;
import {{package}}.mq.common.MQListeners;
import {{package}}.mq.common.MQReactiveMessageListener;
import {{package}}.mq.common.api.MQTemporaryQueuesContainer;
import {{package}}.mq.common.config.exceptions.MQInvalidListenerSetup;
import {{package}}.mq.common.utils.MQMessageListenerUtils;
{{#lombok}}
import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;
{{/lombok}}
{{^lombok}}
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
{{/lombok}}
import org.springframework.aop.framework.AopProxyUtils;
import org.springframework.aop.support.AopUtils;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.BeanFactory;
import org.springframework.beans.factory.BeanFactoryAware;
import org.springframework.beans.factory.BeanInitializationException;
import org.springframework.beans.factory.config.BeanPostProcessor;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.beans.factory.config.EmbeddedValueResolver;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.MethodIntrospector;
import org.springframework.core.annotation.AnnotatedElementUtils;
import org.springframework.core.annotation.AnnotationUtils;
import org.springframework.messaging.handler.invocation.reactive.InvocableHandlerMethod;
import org.springframework.util.StringUtils;
import org.springframework.util.StringValueResolver;

import javax.jms.ConnectionFactory;
import javax.jms.JMSRuntimeException;
import java.lang.reflect.Method;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

{{#lombok}}
@Log4j2
@RequiredArgsConstructor
{{/lombok}}
@Configuration
public class MQListenerAnnotationProcessor implements BeanPostProcessor, BeanFactoryAware {
    {{^lombok}}
    private static final Logger log = LogManager.getLogger(MQListenerAnnotationProcessor.class);
    {{/lombok}}
    private final BeanFactory beanFactory;
    private StringValueResolver embeddedValueResolver;

    {{^lombok}}
    public MQListenerAnnotationProcessor(final BeanFactory beanFactory) {
        this.beanFactory = beanFactory;
    }

    {{/lombok}}
    @Override
    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
        Class<?> targetClass = AopProxyUtils.ultimateTargetClass(bean);
        if (AnnotationUtils.isCandidateClass(targetClass, MQListener.class)) {
            Map<Method, Set<MQListener>> annotatedMethods = MethodIntrospector.selectMethods(targetClass,
                    (MethodIntrospector.MetadataLookup<Set<MQListener>>) method -> {
                        Set<MQListener> listenerMethods = AnnotatedElementUtils.getMergedRepeatableAnnotations(
                                method, MQListener.class, MQListeners.class);
                        return (!listenerMethods.isEmpty() ? listenerMethods : null);
                    });
            if (!annotatedMethods.isEmpty()) {
                annotatedMethods.forEach((method, listeners) ->
                        listeners.forEach(listener -> processJmsListener(listener, beanName, method, bean)));
                if (log.isInfoEnabled()) {
                    log.info("{} @MQListener methods processed on bean '{}': {}",
                            annotatedMethods.size(), beanName, annotatedMethods);
                }
            }
        }
        return BeanPostProcessor.super.postProcessAfterInitialization(bean, beanName);
    }

    protected void processJmsListener(MQListener mqListener, String beanName, Method mostSpecificMethod, Object bean) {
        Method invocableMethod = AopUtils.selectInvocableMethod(mostSpecificMethod, bean.getClass());
        InvocableHandlerMethod handlerMethod = new InvocableHandlerMethod(bean, invocableMethod);
        MQReactiveMessageListener processor = new MQReactiveMessageListener(beanName, handlerMethod);
        ConnectionFactory cf = resolveConnectionFactory(mqListener.connectionFactory());
        MQTemporaryQueuesContainer temporaryQueuesContainer = beanFactory.getBean(MQTemporaryQueuesContainer.class);
        MQListenerConfig config = validateConfiguration(mqListener);
        try {
            MQMessageListenerUtils.createListeners(cf, processor, temporaryQueuesContainer, config);
        } catch (JMSRuntimeException ex) {
            throw new BeanInitializationException("Could not register MQ listener on [" +
                    mostSpecificMethod + "], using ConnectionFactory: " + cf, ex);
        }
    }

    private ConnectionFactory resolveConnectionFactory(String connectionFactory) {
        if (StringUtils.hasText(connectionFactory)) {
            return beanFactory.getBean(connectionFactory, ConnectionFactory.class);
        } else {
            return beanFactory.getBean(ConnectionFactory.class);
        }
    }

    private MQListenerConfig validateConfiguration(MQListener config) {
        int concurrency = Integer.parseInt(Objects.
                requireNonNull(embeddedValueResolver.resolveStringValue(config.concurrency())));
        String queue = embeddedValueResolver.resolveStringValue(config.value());
        MQListenerConfig listener = MQListenerConfig.builder()
                .async(config.async())
                .mqmd(config.mqmd())
                .concurrency(concurrency)
                .queue(queue)
                .tempQueueAlias(config.tempQueueAlias())
                .connectionFactory(config.connectionFactory())
                .build();
        if (listener.getConcurrency() < 1) {
            throw new MQInvalidListenerSetup("Invalid concurrency, it should be greater than 0");
        }
        if (StringUtils.hasText(listener.getQueue()) && StringUtils.hasText(listener.getTempQueueAlias())) {
            throw new MQInvalidListenerSetup("Invalid configuration, should define only one of value or tempQueueAlias");
        }
        if (!StringUtils.hasText(listener.getQueue()) && !StringUtils.hasText(listener.getTempQueueAlias())) {
            throw new MQInvalidListenerSetup("Invalid configuration, should define one of value or tempQueueAlias");
        }
        return listener;
    }

    @Override
    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {
        if (beanFactory instanceof ConfigurableBeanFactory) {
            this.embeddedValueResolver = new EmbeddedValueResolver((ConfigurableBeanFactory) beanFactory);
        }
    }
}
