package {{package}}.mq.common.context;

import {{package}}.mq.common.api.MQDestinationProvider;
import {{package}}.mq.common.api.MQMessageSender;
import {{package}}.mq.common.api.MQMessageCreator;
import reactor.core.publisher.Mono;

import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class MQMultiContextSender implements MQMessageSender {
    private final ConnectionFactory connectionFactory;
    private List<MQContextSender> adapterList;
    private final int connections;
    private final MQDestinationProvider provider;

    public MQMultiContextSender(ConnectionFactory connectionFactory, int connections, MQDestinationProvider provider) {
        this.connectionFactory = connectionFactory;
        this.connections = connections;
        this.provider = provider;
        start();
    }

    public void start() {
        adapterList = IntStream.range(0, connections)
                .mapToObj(idx -> new MQContextSender(connectionFactory.createContext(), provider))
                .collect(Collectors.toList());
    }

    @Override
    public Mono<String> send(Destination destination, MQMessageCreator messageCreator) {
        int selectIndex = (int) (System.currentTimeMillis() % connections);
        return adapterList.get(selectIndex).send(destination, messageCreator);
    }

    @Override
    public Mono<String> send(MQMessageCreator messageCreator) {
        int selectIndex = (int) (System.currentTimeMillis() % connections);
        return adapterList.get(selectIndex).send(messageCreator);
    }
}
