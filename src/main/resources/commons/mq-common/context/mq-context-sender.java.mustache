package {{package}}.mq.common.context;

import {{package}}.mq.common.api.MQDestinationProvider;
import {{package}}.mq.common.api.MQMessageSender;
import {{package}}.mq.common.api.MQMessageCreator;
import reactor.core.publisher.Mono;
import reactor.core.scheduler.Schedulers;

import javax.jms.*;

public class MQContextSender implements MQMessageSender {
    private final JMSContext context;
    private final JMSProducer producer;
    private final Destination defaultDestination;

    public MQContextSender(JMSContext context, MQDestinationProvider provider) {
        this.context = context;
        this.producer = context.createProducer();
        this.defaultDestination = provider.create(context);
    }

    @Override
    public Mono<String> send(MQMessageCreator messageCreator) {
        return send(defaultDestination, messageCreator);
    }

    @Override
    public Mono<String> send(Destination destination, MQMessageCreator messageCreator) {
        return Mono.defer(() -> {
            try {
                Message message = messageCreator.create(context);
                producer.send(destination, message);
                return Mono.just(message.getJMSMessageID());
            } catch (JMSException e) {
                e.printStackTrace();
                return Mono.error(e);
            }
        }).subscribeOn(Schedulers.boundedElastic());
    }
}
