package {{package}}.mq.common.connection;

import {{package}}.mq.common.MQReactiveMessageListener;
import {{package}}.mq.common.api.MQTemporaryQueuesContainer;
import {{package}}.mq.common.config.MQListenerConfig;
import {{package}}.mq.common.utils.MQQueueUtils;
{{#lombok}}
import lombok.Builder;
import lombok.Getter;
import lombok.extern.log4j.Log4j2;
{{/lombok}}
{{^lombok}}
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
{{/lombok}}

import javax.jms.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

{{#lombok}}
@Builder
@Log4j2
{{/lombok}}
public class MQMultiConnectionListener {
    {{^lombok}}
    private static final Logger log = LogManager.getLogger(MQMultiConnectionListener.class);
    {{/lombok}}
    {{#lombok}}
    @Getter
    {{/lombok}}
    private final String name;
    private final ConnectionFactory connectionFactory;
    private final MQReactiveMessageListener listener;
    private final MQTemporaryQueuesContainer container;
    private final MQListenerConfig config;

    public void start() {
        ExecutorService service = Executors.newFixedThreadPool(config.getConcurrency());
        try {
            Connection connection = connectionFactory.createConnection();//NOSONAR
            TemporaryQueue destination = MQQueueUtils.setupTemporaryQueue(connection.createSession(), config);
            container.registerTemporaryQueue(config.getTempQueueAlias(), destination);
            for (int i = 0; i < config.getConcurrency(); i++) {
                service.submit(MQConnectionListener.builder()
                        .session(connection.createSession())
                        .destination(destination)
                        .listener(listener)
                        .build());
            }
            connection.start();
            if (log.isInfoEnabled()) {
                log.info("{} listeners created for {}", config.getConcurrency(), destination.getQueueName());
            }
        } catch (JMSException ex) {
            throw new JMSRuntimeException(ex.getMessage(), ex.getErrorCode(), ex);
        }
    }
    {{^lombok}}

    MQMultiConnectionListener(final String name, final ConnectionFactory connectionFactory, final MQReactiveMessageListener listener, final MQTemporaryQueuesContainer container, final MQListenerConfig config) {
        this.name = name;
        this.connectionFactory = connectionFactory;
        this.listener = listener;
        this.container = container;
        this.config = config;
    }

    public static class MQMultiConnectionListenerBuilder {
        private String name;
        private ConnectionFactory connectionFactory;
        private MQReactiveMessageListener listener;
        private MQTemporaryQueuesContainer container;
        private MQListenerConfig config;


        MQMultiConnectionListenerBuilder() {
        }

        public MQMultiConnectionListener.MQMultiConnectionListenerBuilder name(final String name) {
            this.name = name;
            return this;
        }

        public MQMultiConnectionListener.MQMultiConnectionListenerBuilder connectionFactory(final ConnectionFactory connectionFactory) {
            this.connectionFactory = connectionFactory;
            return this;
        }

        public MQMultiConnectionListener.MQMultiConnectionListenerBuilder listener(final MQReactiveMessageListener listener) {
            this.listener = listener;
            return this;
        }

        public MQMultiConnectionListener.MQMultiConnectionListenerBuilder container(final MQTemporaryQueuesContainer container) {
            this.container = container;
            return this;
        }

        public MQMultiConnectionListener.MQMultiConnectionListenerBuilder config(final MQListenerConfig config) {
            this.config = config;
            return this;
        }

        public MQMultiConnectionListener build() {
            return new MQMultiConnectionListener(this.name, this.connectionFactory, this.listener, this.container, this.config);
        }

        @Override
        public String toString() {
            return "MQMultiConnectionListener.MQMultiConnectionListenerBuilder(name=" + this.name + ", connectionFactory=" + this.connectionFactory + ", listener=" + this.listener + ", container=" + this.container + ", config=" + this.config + ")";
        }
    }

    public static MQMultiConnectionListener.MQMultiConnectionListenerBuilder builder() {
        return new MQMultiConnectionListener.MQMultiConnectionListenerBuilder();
    }

    public String getName() {
        return this.name;
    }
    {{/lombok}}
}
