package {{package}}.mq.common.context;

import {{package}}.mq.common.MQReactiveMessageListener;
import {{package}}.mq.common.config.MQListenerConfig;
import {{package}}.mq.common.utils.MQQueueUtils;
{{#lombok}}
import lombok.Builder;
import lombok.Getter;
{{/lombok}}

import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.JMSConsumer;
import javax.jms.JMSContext;

{{#lombok}}
@Builder
{{/lombok}}
public class MQContextListener implements Runnable {
    {{#lombok}}
    @Getter
    {{/lombok}}
    private final String name;
    private final ConnectionFactory connectionFactory;
    private final MQReactiveMessageListener listener;
    private final MQListenerConfig config;

    @Override
    public void run() {
        JMSContext context = connectionFactory.createContext();
        Destination destination = MQQueueUtils.setupFixedQueue(context, config);
        JMSConsumer consumer = context.createConsumer(destination);//NOSONAR
        consumer.setMessageListener(listener);
    }
    {{^lombok}}

    MQContextListener(final String name, final ConnectionFactory connectionFactory, final MQReactiveMessageListener listener, final MQListenerConfig config) {
        this.name = name;
        this.connectionFactory = connectionFactory;
        this.listener = listener;
        this.config = config;
    }

    public static class MQContextListenerBuilder {
        private String name;
        private ConnectionFactory connectionFactory;
        private MQReactiveMessageListener listener;
        private MQListenerConfig config;

        MQContextListenerBuilder() {
        }

        public MQContextListener.MQContextListenerBuilder name(final String name) {
            this.name = name;
            return this;
        }

        public MQContextListener.MQContextListenerBuilder connectionFactory(final ConnectionFactory connectionFactory) {
            this.connectionFactory = connectionFactory;
            return this;
        }

        public MQContextListener.MQContextListenerBuilder listener(final MQReactiveMessageListener listener) {
            this.listener = listener;
            return this;
        }

        public MQContextListener.MQContextListenerBuilder config(final MQListenerConfig config) {
            this.config = config;
            return this;
        }

        public MQContextListener build() {
            return new MQContextListener(this.name, this.connectionFactory, this.listener, this.config);
        }

        public String toString() {
            return "MQContextListener.MQContextListenerBuilder(name=" + this.name + ", connectionFactory=" + this.connectionFactory + ", listener=" + this.listener + ", config=" + this.config + ")";
        }
    }

    public static MQContextListener.MQContextListenerBuilder builder() {
        return new MQContextListener.MQContextListenerBuilder();
    }

    public String getName() {
        return this.name;
    }
    {{/lombok}}
}
