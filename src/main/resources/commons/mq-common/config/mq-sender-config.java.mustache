package {{package}}.mq.common.config;

import {{package}}.mq.common.api.MQDestinationProvider;
import {{package}}.mq.common.api.MQMessageSender;
import {{package}}.mq.common.context.MQMultiContextSender;
import {{package}}.mq.common.utils.MQQueueUtils;
import com.ibm.mq.jms.MQQueue;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import javax.jms.ConnectionFactory;

@Configuration
public class MQSenderConfig {

    @Bean
    @ConditionalOnMissingBean(MQMessageSender.class)
    public MQMessageSender defaultMQMessageSender(ConnectionFactory cf,
                                                  MQDestinationProvider provider,
                                                  @Value("${ibm.output-concurrency}") int concurrency) {
        return new MQMultiContextSender(cf, concurrency, provider);
    }

    @Bean
    @ConditionalOnMissingBean(MQDestinationProvider.class)
    public MQDestinationProvider defaultDestinationProvider(@Value("${ibm.output-queue}") String outputQueue) {
        return context -> {
            MQQueue queue = (MQQueue) context.createQueue(outputQueue);
            return MQQueueUtils.setProperties(queue, MQListenerConfig.builder().mqmd(true).async(true).build());
        };
    }
}
